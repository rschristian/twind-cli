#!/usr/bin/env node
import e from"sade";import t from"fs/promises";import o from"path";import n from"kleur";import r from"time-span";import{minify as s}from"html-minifier-terser";import{create as i}from"twind";import{virtualSheet as a}from"twind/sheets";import l from"chokidar";import c from"p-event";import f from"p-debounce";import{promises as d}from"fs";import u from"locate-path";function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e}).apply(this,arguments)}function w(e){let t=new Set;for(const o of e.matchAll(/class="([^"]*)"/g))t.add(o[1]);return[...t]}async function p(e){try{const t=await d.readFile(e,"utf-8");return{content:t,rules:w(t)}}catch(e){return{}}}const h=["twind.config.ts","twind.config.mjs","twind.config.js"];function y(e,t){return e.size===t.size&&function(e,t){for(const o of e)if(!t(o))return!1;return!0}(t,t=>e.has(t))}e("twind <src>",!0).version("0.2.1").option("-o, --output","Set output html file path","output.html").option("-c, --config","Set config file path  (default {.,src,pages,docs}/twind.config.{[m]js,ts})").option("-w, --watch","Watch for changes",!0).action(async(e,d)=>{try{await async function(e,d){const w=d.config&&o.resolve(".",d.config)||await async function(){return u([...h,...h.map(e=>o.join("src",e)),...h.map(e=>o.join("pages",e)),...h.map(e=>o.join("docs",e))].map(e=>o.resolve(process.cwd(),e)))}(),g=new Set,v=e=>!g.has(e),b={unknown(){},report(e){"UNKNOWN_DIRECTIVE"==e.id&&(console.warn(n.yellow(`Unknown rule: ${e.rule}`)),g.add(e.rule))}},S=new Map,$=new Map;let j=new Set([""]),z=-1;const k=async()=>{let e={};if(w){const t=r();e=await async function(e){return(await async function(e){const t=process.cwd(),r=o.resolve(t,e);try{return await import(r)}catch(e){return console.error(n.red(`Failed to to load ${n.bold(o.relative(t,r))}: ${e.message}`)),{}}}(e)).default}(w),console.debug(n.green(`Loaded configuration from ${n.bold(o.relative(process.cwd(),w))} in ${n.bold(t.rounded()+" ms")}`))}g.clear(),j=new Set([""]);const t=a();return{sheet:t,tw:i(m({},e,{sheet:t,mode:b,hash:!1})).tw}};let{sheet:I,tw:E}=await k();const M=o.resolve(".",d.output);var F,N=!1,O=!1;try{for(var W,x=function(e){var t;if("undefined"!=typeof Symbol&&(Symbol.asyncIterator&&(t=e[Symbol.asyncIterator]),null==t&&Symbol.iterator&&(t=e[Symbol.iterator])),null==t&&(t=e["@@asyncIterator"]),null==t&&(t=e["@@iterator"]),null==t)throw new TypeError("Object is not async iterable");return t.call(e)}(function(e,{cwd:t=".",watch:n}){t=o.resolve(t);const r=l.watch(e,{cwd:t,persistent:!!n,ignoreInitial:!1,alwaysStat:!0,followSymlinks:!0,awaitWriteFinish:{stabilityThreshold:120,pollInterval:20}});let s=new Map,i=!1;const a=[];let d=c(r,"ready").then(async()=>{if(!n)return i=!0,r.close()});const u=f(()=>{if(i||s.size){const e=a.shift();e&&(e.resolve(i&&!s.size?{done:!0,value:void 0}:{done:!1,value:s}),s=new Map)}},50);let m;return r.on("error",e=>{const t=a.shift();t?t.reject(e):m=e}).on("add",(e,n)=>{s.set(o.resolve(t,e),n),u()}).on("change",(e,n)=>{s.set(o.resolve(t,e),n),u()}).on("unlink",e=>{s.set(o.resolve(t,e),void 0),u()}),{[Symbol.asyncIterator](){return this},async next(){if(m)throw m;return d&&(await d,d=null),new Promise((e,t)=>{a.push({resolve:e,reject:t}),u()})},return:async e=>(i=!0,await r.close(),{done:!0,value:e}),async throw(e){throw i=!0,await r.close(),e}}}(w?[e,w]:[e],d));N=!(W=await x.next()).done;N=!1){const e=W.value;z++,console.info(n.cyan(`Processing ${n.bold(e.size)}${d.watch?" changed":""} file${1==e.size?"":"s"}`));const i=r(),a=[];let l=!1,c="";for(const[t,o]of e.entries())if(t==w)z&&(({sheet:I,tw:E}=await k()),l=!0);else if(o){const e=S.get(t);e&&e.size===o.size&&e.mtimeMs===o.mtimeMs&&e.ino===o.ino||a.push(p(t).then(({content:e,rules:n})=>{if(S.set(t,o),c=e,$.set(t,n),!l)for(let e=n.length;e--;)if(!j.has(n[e])){l=!0;break}}))}else S.delete(t),$.delete(t),l=!0;await Promise.all(a);const f=new Set,u=e=>{f.add(e)};if($.forEach(e=>{e.forEach(u)}),console.debug(n.gray(`Extracted ${n.bold(f.size)} candidate${1==f.size?"":"s"} from ${S.size} file${1==S.size?"":"s"} in ${n.bold(i.rounded()+" ms")}`)),l||!y(j,f)){const e=r();I.reset(),E([...f].filter(v).sort().join(" ")),console.debug(n.gray(`Generated ${n.bold(I.target.length)} CSS rule${1==I.target.length?"":"s"} in ${n.bold(e.rounded()+" ms")}`)),j=f,await t.mkdir(o.dirname(M),{recursive:!0}),await t.writeFile(M,s(c.replace('<style id="__twind"></style>',`<style>${I.target.join("")}</style>`),{minifyJS:!0,minifyCSS:!0,collapseWhitespace:!0})),console.info(n.green(`Finished ${n.bold(o.relative(process.cwd(),M))} in ${n.bold(i.rounded()+" ms")}`))}else console.info(n.green().dim("No new classes detected - skipped generating CSS"));d.watch&&console.info("\n"+n.dim("Waiting for file changes..."))}}catch(e){O=!0,F=e}finally{try{N&&null!=x.return&&await x.return()}finally{if(O)throw F}}z<0&&console.error(n.yellow("No matching files found..."))}(e,d)}catch(e){console.error(e.stack||e.message),process.exit(1)}}).parse(process.argv);
